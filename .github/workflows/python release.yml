name: Upload Python Package

on:
  release:
    types: [published]

env:

  ARAVIS_VER: ${{ github.event.release.tag_name }}
  PKG_CONFIG_INSTALL: C:\pkg-config
  PKG_CONFIG_VERSION: 0.28-1
  NINJA_INSTALL: C:\ninja

jobs:
  linux:
    name: Build wheel on ubuntu
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Used to host cibuildwheel
      - uses: actions/setup-python@v3
        with:
          python-version: '3.11'

      - uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          pip3 install meson ninja Markdown toml typogrify
          sudo apt update
          sudo apt install python3 libusb-1.0-0-dev gobject-introspection valgrind libgstreamer-plugins-bad1.0-dev libgtk-3-dev libgirepository1.0-dev python3-gi libunwind-dev gettext
      - name: Build
        run: |
          mkdir build
          meson setup -Ddocumentation=disabled -Dgst-plugin=enabled -Dusb=enabled -Dviewer=enabled -Dintrospection=enabled  -Dgv-n-buffers=1 -Dprefix=${{ github.workspace }}/install build . 
          meson compile -C ./build
          meson install -C ./build
        env:
          CC: gcc

      - name: install dependency
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update && sudo apt install libgirepository1.0-dev gcc libcairo2-dev pkg-config
          pip install pycairo
          pip install PyGObject
      - name: Copy linux file
        run: |
          cp  install/lib/x86_64-linux-gnu/libaravis* aravis-python/aravis/lib/
          cp -r install/lib/x86_64-linux-gnu/girepository-1.0/.  aravis-python/aravis/lib/
          ls aravis-python/aravis/lib
      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.16.4

      - name: Build wheels
        run: |
          cd aravis-python && python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: ""
          CIBW_SKIP: "*-win32 *i686 *musllinux*"
          CIBW_BUILD: cp311-*
          CIBW_ENVIRONMENT: ARAVIS_VER=${{ github.event.release.tag_name }}

      - uses: actions/upload-artifact@v4
        with:
          name: wheel-linux
          path: aravis-python/wheelhouse/*.whl


  # macos:
  #   name: Build wheel on macos
  #   runs-on: macos-latest-xlarge
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Unbreak Python in Github Actions
  #       run: |
  #         find /usr/local/bin -lname '*/Library/Frameworks/Python.framework/*' -delete
  #         sudo rm -rf /Library/Frameworks/Python.framework/
  #         brew install --force python3 && brew unlink python3 && brew link --overwrite python3
  #     - name: Install dependencies
  #       run: |
  #         brew update
  #         brew install meson ninja gcc gettext intltool libxml2 libusb gstreamer gnome-icon-theme gobject-introspection glib
  #     - name: Build
  #       run: |
  #         mkdir build
  #         meson setup -Ddocumentation=disabled -Dgst-plugin=enabled -Dusb=enabled -Dviewer=enabled -Dintrospection=enabled  -Dgv-n-buffers=1 -Dprefix=${{ github.workspace }}/install build . 
  #         meson compile -C ./build
  #         meson install -C ./build
  #     - name: Copy macos file
  #       run: |
  #         cp  install/lib/libaravis* aravis-python/aravis/lib/
  #         cp -r install/lib/girepository-1.0/.  aravis-python/aravis/lib/
  #         ls aravis-python/aravis/lib

  #     - name: Install build
  #       run: python3 -m pip install --break-system-packages build

  #     - name: Build wheels
  #       run: |
  #         python3 --version
  #         cd aravis-python && python3 -m build

  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: wheel-macos
  #         path: aravis-python/dist/*.whl


  windows:
    name: Build wheel on windows
    runs-on: windows-latest
    steps:
      - name: Disable perl
        run: |
          rm -r C:\Strawberry\perl

      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Setup winget for pkg-config-lite
        uses: Cyberboss/install-winget@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup pkg-config-lite
        run: winget install bloodrock.pkg-config-lite --accept-source-agreements --accept-package-agreements --location ${{env.PKG_CONFIG_INSTALL}} --version ${{env.PKG_CONFIG_VERSION}}

      - name: Confirm pkg-config
        id: pkg-config-existence
        uses: andstor/file-existence-action@v3
        with:
          files: ${{env.PKG_CONFIG_INSTALL}}\pkg-config-lite-${{env.PKG_CONFIG_VERSION}}\bin\pkg-config.exe
          fail: true

      - name: Setup Meson
        run: |
          pip install meson

      - name: Setup Ninja
        uses: ahmedyarub/setup-ninja@master
        with:
          version: 1.11.1
          dest: ${{env.NINJA_INSTALL}}

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2

      - name: Set up MSVC command env
        uses: ilammy/msvc-dev-cmd@v1

      - name: Checkout Aravis
        uses: actions/checkout@v2

      - name: Check for existing cache
        id: cache_status
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}\vcpkg_installed
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/vcpkg.json') }}
      
      - name: Install vcpkg
        if: steps.cache_status.outputs.cache-hit != 'true'
        shell: cmd
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          cd vcpkg && .\bootstrap-vcpkg.bat  && cd ../

      - name: Install dependencies
        if: steps.cache_status.outputs.cache-hit != 'true'
        shell: cmd
        run: |
          ${{ github.workspace }}\vcpkg\vcpkg.exe install --x-install-root ${{ github.workspace }}\vcpkg_installed

      - name: Cache dependencies
        if: steps.cache_status.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ${{ github.workspace }}\vcpkg_installed
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/vcpkg.json') }}

      - name: Build Aravis
        shell: cmd
        run: |
          set PATH=${{env.PKG_CONFIG_INSTALL}}\pkg-config-lite-${{env.PKG_CONFIG_VERSION}}\bin;%PATH%
          set PATH=${{ github.workspace }}\vcpkg_installed\x64-windows\bin;%PATH%
          set PATH=${{ github.workspace }}\vcpkg_installed\x64-windows\tools\gobject-introspection;%PATH%
          set PATH=${{env.NINJA_INSTALL}};%PATH%
          set PKG_CONFIG_PATH=${{ github.workspace }}\vcpkg_installed\x64-windows\lib\pkgconfig\;%PKG_CONFIG_PATH%
          meson setup --pkg-config-path ${{ github.workspace }}\vcpkg_installed\x64-windows\lib\pkgconfig -Ddocumentation=disabled -Dusb=enabled -Dviewer=disabled -Dgv-n-buffers=1 -Dprefix=${{ github.workspace }}\install -Dintrospection=enabled build .
          meson compile -C ./build
          meson install -C ./build

      - name: Copy windows file
        shell: powershell
        run: |
          cp  install/bin/*.dll  aravis-python/aravis/bin/
          cp  install/lib/girepository-1.0/* aravis-python/aravis/lib/
          cp  ${{ github.workspace }}/vcpkg_installed/x64-windows/bin/*.dll aravis-python/aravis/bin/
          cp  ${{ github.workspace }}/vcpkg_installed/x64-windows/lib/girepository-1.0/* aravis-python/aravis/lib/
          ls  aravis-python/aravis/bin/
          ls  aravis-python/aravis/lib/



      - name: Install cibuildwheel
        shell: powershell
        run: python -m pip install cibuildwheel==2.16.4

      - name: Build wheels
        run: |
          cd aravis-python && python3 -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_ARCHS_MACOS: universal2
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: ""
          CIBW_SKIP: "*-win32 *i686 *musllinux*"
          CIBW_BUILD: cp311-*
          CIBW_ENVIRONMENT: ARAVIS_VER=${{ github.event.release.tag_name }}

      - uses: actions/upload-artifact@v4
        with:
          name: wheel-windows
          path: aravis-python/wheelhouse/*.whl


  upload_TEST_PYPI:
    needs: [linux, windows]
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write

  # or, alternatively, upload to PyPI on every tag starting with 'v' (remove on: release above to use this)
  # if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
    - uses: actions/download-artifact@v4
      with:
        # unpacks all CIBW artifacts into dist/
        pattern: wheel*
        path: dist
        merge-multiple: true

    - uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository-url: https://test.pypi.org/legacy/

  test_TEST_PYPI:
    needs: [upload_TEST_PYPI]
    name: Test wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
         os: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v3
        with:
          python-version: '3.11'
      - name: test
        run: |
          sudo apt-get update && sudo apt install libgirepository1.0-dev gcc libcairo2-dev pkg-config
          pip install pycairo
          pip install PyGObject
          sleep 60 # wait package to upload
          pip install -i https://test.pypi.org/simple/ aravis-python
          python3 -c "import aravis"
    

  upload_PYPI:
    needs: [ test_TEST_PYPI ]
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write

  # or, alternatively, upload to PyPI on every tag starting with 'v' (remove on: release above to use this)
  # if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@v4
        with:
          # unpacks all CIBW artifacts into dist/
          pattern: wheel*
          path: dist
          merge-multiple: true

      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
  
